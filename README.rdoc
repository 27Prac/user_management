=Set Up
-Install padrino gem
     gem install padrino
- Clone the project:
     git clone -b second_release git@github.com:27Prac/user_management.git
     git clone -b first_release git@github.com:27Prac/user_management_webapp.git

- cd to  both the project and bundle

- Start padrino for both the projects
    Running 'user_management'  ->  `padrino start`
    Running 'user_management_webapp' -> `padrino start -p 3001`

=Additional links
   - Readme for 'user_management' repo -  https://github.com/27Prac/user_management/blob/second_release/README.rdoc
   - API Reference for 'user_management' repo -  https://github.com/27Prac/user_management/blob/second_release/README_APIREFERENCE.rdoc
   - Read me for 'user_management_app' repo - https://github.com/27Prac/user_management_webapp/blob/first_release/README.rdoc

=Workflow
- Create User using create user api
      Create User API:
          Sucess Scenario
                - Creates the user with name,email and password as specified in the body
           Error Scenario
                   - This api will return "NoUserCreateException" if it is not able to create a user due to any reason such as "name already exits, password short" etc.
                   - This api will return "InputValidationError" if the content type send is not json
- You will get the email when the account gets created Click the confirmation link in the email.
      Emails are being sent using Gmail SMTP settings.

- Call the Oauth2 Endpoint to login. It will redirect the call back witha accesstoken. Call the Oauth2 endpoint of the 'user_management' server provides the user name and password. The 'user_management' server follows the whole Oauth2 protocol and redirectes the call to 'user_management_webapp' with access token.

- Using the accesstoken generated in above call make the read user call
       Read User API:
         Sucess Scenario
              - Return the json representation of the user in the body
         Error Scenario
              - Return the "ResourceNotFoundError" if the user does not exist.

- Using the accesstoken generated to update the user
    Update User API:
           Sucess Scenario
                - Updates the user
           Error Scenario
                - Return the "ResourceNotFoundError" if the user does not exist.


=REST API's for CRU operations:-
- For API refernce see this doc
https://github.com/27Prac/user_management/blob/master/README_APIREFERENCE.rdoc


=User Interface

- Go to localhost:3001 and you can create, login , logout , update a user etc.

=Example REST API calls

- Create a User Example
        curl -v -X POST localhost:3000/users/ -H "Content-Type:application/json" --data-binary "{\"name\":\"somename\",\"email\":\"sn@gmail.com\",\"password\":\"12345\"}"

- Above call with send a mail with confirmation link to the email address. Sometimes it is not able to send a email. In that case to confirm user copy the confirmation link from the terminal console and paste it in the browser to confirm the user.

- Get the access token by following OAuth protocol.

Note: It will error if the user is not yet clicked the confirmation link


- Set auth header froom the response header of previsou call
          eg auth_header=hVBINWBA91aBvctJ+do3Xl/tvb00WUcYzKk0EFrkxhElGdAnnNKvVQ==

- Read the user
         curl -v -X GET localhost:3000/users/ -H "Authorization:$auth_header"

- Update the user
        curl -v  -X PUT localhost:3000/user -H "Content-Type:application/json" --data-binary "{\"name\":\"fgg\",\"email\":\"sn@gmail.com\",\"password\":\"12345\"}" -H "Authorization:$auth_header"

- Again call read to check that the user has been updated
        curl -v -X GET localhost:3000/users/ -H "Authorization:$auth_header"





